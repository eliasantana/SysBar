/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.bar.view;

import br.com.bar.dao.ConexaoBd;
import br.com.bar.dao.Log;
import br.com.bar.dao.ReportUtil;
import br.com.bar.model.Contas;
import br.com.bar.model.TableModelContasApagar;
import br.com.bar.util.FormataValor;
import br.com.bar.util.Util;
import br.com.br.controler.ControlerCaixa;
import br.com.br.controler.ControlerContasApagar;
import br.com.br.controler.ControlerDadosEmpresa;
import br.com.br.controler.ControlerFuncionario;
import br.com.br.controler.ControlerGrupo;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import net.proteanit.sql.DbUtils;
import org.apache.tools.ant.taskdefs.Echo;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PiePlot;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author elias
 */
public class TelaContasApagar extends JDialog {

    /**
     * Creates new form TelaContasApagar
     */
    ControlerContasApagar cc = new ControlerContasApagar();
    ControlerFuncionario cf = new ControlerFuncionario();
    ControlerGrupo grupo = new ControlerGrupo();
    ControlerCaixa caixa = new ControlerCaixa();
    ReportUtil rpu = new ReportUtil();
    SimpleDateFormat df = new SimpleDateFormat("dd-MM-yyyy");
    Connection conexao = ConexaoBd.conector();
    ControlerDadosEmpresa de = new ControlerDadosEmpresa();
    TableModelContasApagar modelcontas = new TableModelContasApagar();
    TelaCaixa tc;
    Object[] opcao = {"   Sim   ", "   Não   "};
    Date ultimaDataFimSelecionada;
    Util u = new Util();
    // Instacia um registro de log
    Log l = new Log();
    /*
        Instância da tela principal para realizar atualização dos dados 
        informativos referente a contas em aberto e produtos com com quantidade
        baixa no estoque.
     */
    
    TelaPrincipal telaPrincipal;

    // Formato de data dos campos JDateSchoose
    String formato = "dd/MM/yyyy";
    
    public TelaContasApagar() {
        initComponents();
        Date d = new Date();
        desaBilitaBotoes();
        jdateChooserPagamento.setDateFormatString(formato);
        jdateChooserVencimento.setDateFormatString(formato);
        jDateFim.setDateFormatString(formato);
        jDateInicio.setDateFormatString(formato);
        
        txtIdConta.setVisible(false);
        txtIdFuncionario.setVisible(false);
        txtIdGrupo.setVisible(false);
        lblOperador.setVisible(false);
        lblCargo.setVisible(false);
        btnGraficoDeDespesas.setVisible(false);
        lblsalvar.setEnabled(false);
        
        estadoInicial();

        try {
            //Adiciona data ao objeto jdateChooser 

            jdateChooserPagamento.setDate(d);
        } catch (Exception e) {
            System.out.println("br.com.bar.view.TelaContasApagar.<init>()" + e);
        }

    }

    public void recebeOperador(TelaPrincipal tela, String operador, String cargo) {

        lblCargo.setText(cargo);
        lblOperador.setText(operador);
        txtIdFuncionario.setText(cf.localizaIdLogin(operador));
        l.setUsuario(operador);

        modelcontas.redimensionaColunas(tblContas);
        this.telaPrincipal = tela;
    }

    public void recebeTelaCaixa(TelaCaixa c) {
        this.tc = c;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        Bordas = new javax.swing.JPanel();
        painelEsquerdo = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtDescricao = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtValor = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        comboGrupoDespesas = new javax.swing.JComboBox<>();
        lblDataDePAgamento = new javax.swing.JLabel();
        jdateChooserVencimento = new com.toedter.calendar.JDateChooser();
        jdateChooserPagamento = new com.toedter.calendar.JDateChooser();
        txtIdConta = new javax.swing.JTextField();
        jCheckMultiplo = new javax.swing.JCheckBox();
        jLabel9 = new javax.swing.JLabel();
        lblValorPago = new javax.swing.JLabel();
        lblOperador = new javax.swing.JLabel();
        lblCargo = new javax.swing.JLabel();
        txtIdFuncionario = new javax.swing.JTextField();
        txtIdGrupo = new javax.swing.JTextField();
        lblsalvar = new javax.swing.JLabel();
        lblLimpar = new javax.swing.JLabel();
        jSpinQtd = new javax.swing.JSpinner();
        txtValorPago = new javax.swing.JFormattedTextField();
        painelDireito = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblContas = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        tbnFechar = new javax.swing.JLabel();
        btnBaixar = new javax.swing.JLabel();
        btnGraficoDeDespesas = new javax.swing.JLabel();
        lblExcluir = new javax.swing.JLabel();
        comboFiltro = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        panelFiltro = new javax.swing.JPanel();
        jDateInicio = new com.toedter.calendar.JDateChooser();
        jLabel11 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jDateFim = new com.toedter.calendar.JDateChooser();
        lblPesquisar = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(null);

        Bordas.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51)));
        Bordas.setLayout(null);

        painelEsquerdo.setBackground(new java.awt.Color(38, 53, 61));
        painelEsquerdo.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        painelEsquerdo.setLayout(null);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/bar/imagens/CalendarioCinzaClaro.png"))); // NOI18N
        painelEsquerdo.add(jLabel1);
        jLabel1.setBounds(120, 10, 128, 100);

        txtDescricao.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtDescricao.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDescricaoFocusGained(evt);
            }
        });
        txtDescricao.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtDescricaoKeyPressed(evt);
            }
        });
        painelEsquerdo.add(txtDescricao);
        txtDescricao.setBounds(20, 150, 320, 40);

        jLabel5.setFont(new java.awt.Font("Yu Gothic UI Light", 0, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Valor R$");
        painelEsquerdo.add(jLabel5);
        jLabel5.setBounds(190, 280, 70, 30);

        txtValor.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtValor.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtValorFocusLost(evt);
            }
        });
        txtValor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtValorKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtValorKeyReleased(evt);
            }
        });
        painelEsquerdo.add(txtValor);
        txtValor.setBounds(190, 310, 150, 40);

        jLabel8.setFont(new java.awt.Font("Yu Gothic UI Light", 0, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Data de Vencimento");
        painelEsquerdo.add(jLabel8);
        jLabel8.setBounds(20, 200, 170, 30);

        jLabel7.setFont(new java.awt.Font("Yu Gothic UI Light", 0, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Grupo de Despesas");
        painelEsquerdo.add(jLabel7);
        jLabel7.setBounds(20, 280, 150, 30);

        comboGrupoDespesas.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        comboGrupoDespesas.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboGrupoDespesasItemStateChanged(evt);
            }
        });
        comboGrupoDespesas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboGrupoDespesasActionPerformed(evt);
            }
        });
        painelEsquerdo.add(comboGrupoDespesas);
        comboGrupoDespesas.setBounds(20, 310, 160, 40);

        lblDataDePAgamento.setFont(new java.awt.Font("Yu Gothic UI Light", 0, 18)); // NOI18N
        lblDataDePAgamento.setForeground(new java.awt.Color(255, 255, 255));
        lblDataDePAgamento.setText("Data de Pagamento");
        painelEsquerdo.add(lblDataDePAgamento);
        lblDataDePAgamento.setBounds(190, 200, 170, 30);

        jdateChooserVencimento.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        painelEsquerdo.add(jdateChooserVencimento);
        jdateChooserVencimento.setBounds(20, 230, 160, 40);

        jdateChooserPagamento.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        painelEsquerdo.add(jdateChooserPagamento);
        jdateChooserPagamento.setBounds(190, 230, 150, 40);

        txtIdConta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIdContaActionPerformed(evt);
            }
        });
        painelEsquerdo.add(txtIdConta);
        txtIdConta.setBounds(240, 30, 50, 30);

        jCheckMultiplo.setBackground(new java.awt.Color(38, 53, 61));
        jCheckMultiplo.setFont(new java.awt.Font("Yu Gothic UI Light", 0, 12)); // NOI18N
        jCheckMultiplo.setForeground(new java.awt.Color(255, 255, 255));
        jCheckMultiplo.setText("Lançamento Múltiplo");
        jCheckMultiplo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCheckMultiploMouseClicked(evt);
            }
        });
        jCheckMultiplo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckMultiploActionPerformed(evt);
            }
        });
        painelEsquerdo.add(jCheckMultiplo);
        jCheckMultiplo.setBounds(210, 120, 160, 25);

        jLabel9.setFont(new java.awt.Font("Yu Gothic UI Light", 0, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Descrição");
        painelEsquerdo.add(jLabel9);
        jLabel9.setBounds(20, 120, 110, 20);

        lblValorPago.setFont(new java.awt.Font("Yu Gothic UI Light", 0, 18)); // NOI18N
        lblValorPago.setForeground(new java.awt.Color(255, 255, 255));
        lblValorPago.setText("Valor Pago R$");
        painelEsquerdo.add(lblValorPago);
        lblValorPago.setBounds(190, 360, 150, 30);

        lblOperador.setFont(new java.awt.Font("Yu Gothic UI Light", 0, 12)); // NOI18N
        lblOperador.setForeground(new java.awt.Color(255, 255, 255));
        lblOperador.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/bar/imagens/usuario_branco.png"))); // NOI18N
        painelEsquerdo.add(lblOperador);
        lblOperador.setBounds(20, 70, 100, 30);

        lblCargo.setFont(new java.awt.Font("Yu Gothic UI Light", 0, 12)); // NOI18N
        lblCargo.setForeground(new java.awt.Color(255, 255, 255));
        lblCargo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/bar/imagens/perfil (2).png"))); // NOI18N
        lblCargo.setText("Cargo");
        painelEsquerdo.add(lblCargo);
        lblCargo.setBounds(250, 70, 100, 30);
        painelEsquerdo.add(txtIdFuncionario);
        txtIdFuncionario.setBounds(30, 30, 40, 30);
        painelEsquerdo.add(txtIdGrupo);
        txtIdGrupo.setBounds(80, 30, 40, 30);

        lblsalvar.setFont(new java.awt.Font("Yu Gothic UI", 0, 14)); // NOI18N
        lblsalvar.setForeground(new java.awt.Color(255, 255, 255));
        lblsalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/bar/imagens/salvar32x32.png"))); // NOI18N
        lblsalvar.setText("Salvar");
        lblsalvar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblsalvarMouseClicked(evt);
            }
        });
        painelEsquerdo.add(lblsalvar);
        lblsalvar.setBounds(70, 510, 110, 60);

        lblLimpar.setFont(new java.awt.Font("Yu Gothic UI", 0, 14)); // NOI18N
        lblLimpar.setForeground(new java.awt.Color(255, 255, 255));
        lblLimpar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/bar/imagens/fecharWhite24x24.png"))); // NOI18N
        lblLimpar.setText("Limpar");
        lblLimpar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblLimparMouseClicked(evt);
            }
        });
        lblLimpar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                lblLimparKeyReleased(evt);
            }
        });
        painelEsquerdo.add(lblLimpar);
        lblLimpar.setBounds(190, 510, 110, 60);

        jSpinQtd.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));
        painelEsquerdo.add(jSpinQtd);
        jSpinQtd.setBounds(190, 230, 150, 40);

        txtValorPago.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        txtValorPago.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtValorPago.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtValorPagoFocusLost(evt);
            }
        });
        txtValorPago.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtValorPagoKeyPressed(evt);
            }
        });
        painelEsquerdo.add(txtValorPago);
        txtValorPago.setBounds(190, 390, 150, 40);

        Bordas.add(painelEsquerdo);
        painelEsquerdo.setBounds(0, 0, 370, 572);

        painelDireito.setBackground(new java.awt.Color(204, 204, 204));
        painelDireito.setLayout(null);

        tblContas = new javax.swing.JTable(){

            public boolean isCellEditable(int rowIndex, int colIndex){
                return false;
            }
        };
        tblContas.setFont(new java.awt.Font("Yu Gothic UI Light", 0, 12)); // NOI18N
        tblContas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "CÓD. INT.", "DESCRIÇÃO", "VALOR R$", "VENCIMENTO", "PAGAMENTO", "VLR PAGO R$", "OPERADOR", "GRUPO"
            }
        ));
        tblContas.setRowHeight(25);
        tblContas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblContasMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblContas);

        painelDireito.add(jScrollPane1);
        jScrollPane1.setBounds(18, 150, 888, 350);

        jPanel1.setBackground(new java.awt.Color(38, 53, 61));

        tbnFechar.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        tbnFechar.setForeground(new java.awt.Color(255, 255, 255));
        tbnFechar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        tbnFechar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/bar/imagens/fecharWhite24x24.png"))); // NOI18N
        tbnFechar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbnFecharMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(tbnFechar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(tbnFechar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        painelDireito.add(jPanel1);
        jPanel1.setBounds(872, 0, 40, 40);

        btnBaixar.setFont(new java.awt.Font("Yu Gothic UI", 0, 12)); // NOI18N
        btnBaixar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/bar/imagens/btnbaixar-48.png"))); // NOI18N
        btnBaixar.setText("Pagar");
        btnBaixar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnBaixarMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnBaixarMouseEntered(evt);
            }
        });
        painelDireito.add(btnBaixar);
        btnBaixar.setBounds(420, 500, 118, 70);

        btnGraficoDeDespesas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/bar/imagens/btngrafico2-48.png"))); // NOI18N
        btnGraficoDeDespesas.setText("Gráfico");
        btnGraficoDeDespesas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnGraficoDeDespesasMouseClicked(evt);
            }
        });
        painelDireito.add(btnGraficoDeDespesas);
        btnGraficoDeDespesas.setBounds(590, 500, 116, 70);

        lblExcluir.setFont(new java.awt.Font("Yu Gothic UI", 0, 14)); // NOI18N
        lblExcluir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/bar/imagens/Lixeira.png"))); // NOI18N
        lblExcluir.setText("Excluir");
        lblExcluir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblExcluirMouseClicked(evt);
            }
        });
        painelDireito.add(lblExcluir);
        lblExcluir.setBounds(790, 500, 90, 70);

        comboFiltro.setFont(new java.awt.Font("Yu Gothic UI", 0, 12)); // NOI18N
        comboFiltro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione...", "Pagas", "Abertas" }));
        comboFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboFiltroActionPerformed(evt);
            }
        });
        painelDireito.add(comboFiltro);
        comboFiltro.setBounds(20, 110, 178, 30);

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Yu Gothic UI Light", 0, 48)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Pagamentos");
        painelDireito.add(jLabel2);
        jLabel2.setBounds(280, 10, 350, 70);

        jLabel6.setText("Contas");
        painelDireito.add(jLabel6);
        jLabel6.setBounds(20, 90, 90, 20);

        panelFiltro.setBackground(new java.awt.Color(204, 204, 204));
        panelFiltro.setLayout(null);

        jDateInicio.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jDateInicioPropertyChange(evt);
            }
        });
        panelFiltro.add(jDateInicio);
        jDateInicio.setBounds(10, 30, 120, 30);

        jLabel11.setText("Início");
        panelFiltro.add(jLabel11);
        jLabel11.setBounds(10, 10, 60, 20);

        jLabel3.setText("Fim");
        panelFiltro.add(jLabel3);
        jLabel3.setBounds(140, 10, 90, 20);

        jDateFim.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jDateFimPropertyChange(evt);
            }
        });
        panelFiltro.add(jDateFim);
        jDateFim.setBounds(140, 30, 120, 30);

        lblPesquisar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/bar/imagens/lopa32x32.png"))); // NOI18N
        lblPesquisar.setText("Pesquisar");
        lblPesquisar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblPesquisarMouseClicked(evt);
            }
        });
        panelFiltro.add(lblPesquisar);
        lblPesquisar.setBounds(270, 30, 110, 32);

        painelDireito.add(panelFiltro);
        panelFiltro.setBounds(200, 80, 420, 65);

        Bordas.add(painelDireito);
        painelDireito.setBounds(360, 1, 911, 570);

        getContentPane().add(Bordas);
        Bordas.setBounds(0, 0, 1273, 572);

        setSize(new java.awt.Dimension(1273, 573));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void tbnFecharMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbnFecharMouseClicked
        // Fecha tela principal
        telaPrincipal.atualizaInformativo();
        this.dispose();
    }//GEN-LAST:event_tbnFecharMouseClicked

    private void txtValorKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtValorKeyReleased


    }//GEN-LAST:event_txtValorKeyReleased

    private void txtDescricaoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDescricaoKeyPressed
        // Foca combo Grupo de Despesas ao pressionar enter

        if (txtDescricao.getText().length() > 1) {
            lblsalvar.setEnabled(true);
        } else {
            lblsalvar.setEnabled(false);
        }
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            comboGrupoDespesas.requestFocus();
        }
    }//GEN-LAST:event_txtDescricaoKeyPressed

    private void comboGrupoDespesasItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboGrupoDespesasItemStateChanged

    }//GEN-LAST:event_comboGrupoDespesasItemStateChanged

    private void comboGrupoDespesasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboGrupoDespesasActionPerformed
        try {

            txtIdGrupo.setText(grupo.localizaIdGrupo(comboGrupoDespesas));
            String operador = lblOperador.getText();

        } catch (NullPointerException e) {
            System.out.println("br.com.bar.view.TelaContasApagar.comboGrupoDespesasActionPerformed()" + e);
        }


    }//GEN-LAST:event_comboGrupoDespesasActionPerformed

    private void tblContasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblContasMouseClicked
        // Habilita Botões

        if (!"Abertas".equals(comboFiltro.getSelectedItem().toString())) {
            lblLimpar.setEnabled(true);
        } else {

            habilitaBotoes();
            jCheckMultiplo.setEnabled(false);
            lblsalvar.setEnabled(false);
            lblLimpar.setEnabled(true);

            // Data Atual
            Date dataAtual = new Date();
            // Seleciona dados da tabela
            int linha = tblContas.getSelectedRow();
            String dtVencimento = tblContas.getModel().getValueAt(linha, 3).toString();

            jdateChooserVencimento.setDate(u.converteData(u.formataDataBanco(dtVencimento)));
            txtValor.setText(tblContas.getModel().getValueAt(linha, 2).toString());
            Contas c = new Contas();
            c.setId(txtIdConta.getText());
            c.setDataPagto(null);
            c.setValor(null);
            c.setDescricao(tblContas.getModel().getValueAt(linha, 1).toString());
            txtDescricao.setText(c.getDescricao());

            try {
                String vlrPagto = tblContas.getModel().getValueAt(linha, 5).toString().replaceAll(",", ".");
                lblExcluir.setEnabled(false);

            } catch (Exception e) {
                c.setValor("0");
            }
            //System.out.println("Valor PAgo: " + c.getValoPagto());
            txtIdConta.setText(tblContas.getModel().getValueAt(linha, 0).toString());

            String dataPagamento;
            String dataVencimento = tblContas.getModel().getValueAt(linha, 3).toString();
            // Habilita botão Baixar caso a conta ainda não tenha sido paga
            try {
                tblContas.getModel().getValueAt(linha, 4).toString();
                btnBaixar.setEnabled(false);
            } catch (Exception e) {
                btnBaixar.setEnabled(true);
            }

            String tipo = tblContas.getModel().getValueAt(linha, 7).toString();
            comboGrupoDespesas.setSelectedItem(tipo);

            /*
               Captura a exceção durante o clique para contas abertas onde a coluna valor pago está vazia.
               
             */
            try {
                String valorPAgo = tblContas.getModel().getValueAt(linha, 5).toString();
                // Seta nulo para o campo valor pago e a conta selecionada já estiver paga.                
                txtValorPago.setText(null);
            } catch (Exception e) {
                // Repete o valor no campo valor pago para contas em aberto
                String valorPAgo = tblContas.getModel().getValueAt(linha, 2).toString();
                txtValorPago.setText(valorPAgo);
            }

            try {
                dataPagamento = tblContas.getModel().getValueAt(linha, 4).toString();
                jdateChooserPagamento.setDate(new SimpleDateFormat("dd/MM/yyyy").parse(dataPagamento));
            } catch (ParseException e) {

            } catch (NullPointerException n) {
                // Caso o valor seja nulo exibe os campos para pagamento
                lblDataDePAgamento.setVisible(true);
                lblValorPago.setVisible(true);
                jdateChooserPagamento.setDate(new Date());
                jdateChooserPagamento.setVisible(true);
                //lblFuncionario.setVisible(false);
                txtValorPago.setVisible(true);
                btnBaixar.setVisible(true);

            }
            Date dtVencito = u.converteData(u.formataDataBanco(dataVencimento));
            // 15-02                    02-02
            if (dataAtual.getTime() >= dtVencito.getTime()) {
                txtValorPago.setEnabled(true);
            } else {
                txtValorPago.setEnabled(false);
            }
            try {

                if (evt.getButton() == MouseEvent.BUTTON3) {
                    JPopupMenu menuPopup = cc.menu(c, lblOperador, comboFiltro);
                    menuPopup.show(tblContas, evt.getX(), evt.getY());
                    limpaForm();

                }
            } catch (Exception e) {
                System.out.println("br.com.bar.view.TelaContasApagar.tblContasMouseClicked()" + e);

            }
        }

    }//GEN-LAST:event_tblContasMouseClicked

    private void btnBaixarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBaixarMouseClicked
        if (btnBaixar.isEnabled()) {

            Date dataAtual = new Date();
            Date dtVencimento;
            Contas c = new Contas();
            c.setId(txtIdConta.getText());
            //c.setValoPagto(txtValorPago.getText().replaceAll(",", "."));
            c.setValoPagto(txtValorPago.getText().replace(".", "").replace(",", "."));
            //c.setDataPagto(u.formataDataBanco(new Date())); // Formata a data de pagamento para o formato yyyy-MM-dd(MySql)
            Timestamp t = new Timestamp(new Date().getTime());
            c.setDataPagto(String.valueOf(t)); // Formata a data de pagamento para o formato yyyy-MM-dd(MySql)
            int linha = tblContas.getSelectedRow();
            c.setOperador(lblOperador.getText());
            // Se a coluna selecionada estiver vazia gera um NullPointException
            try {

                String valorpago = tblContas.getModel().getValueAt(linha, 5).toString();
                //System.out.println(valorpago);

            } catch (Exception e) {
                // Pega a data de Vencimento da conta em aberto
                c.setDataVencto(tblContas.getModel().getValueAt(linha, 3).toString()); //dd/mm/yyyy

                if (c.getId() == null) {
                    System.out.println("Selecione uma conta para continuar!");
                } else {
                    String data = u.formataDataBanco(c.getDataVencto());
                    dtVencimento = u.converteData(data);

                    // Realiza o pagamento.
                    int op = JOptionPane.showOptionDialog(null, "Confirma o pagamento desta conta?", "Atenção!", 
                             JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE, null, opcao, opcao[1]);
                    if (op == 0) {
                        // Total em espécie
                        double totalEspecie = caixa.totalizaTipoEntrada(lblOperador.getText(), "Dinheiro");
                        //Valor a ser pago
                        double valorPg = Double.parseDouble(txtValorPago.getText().replace(".", "").replace(",", "."));
                        System.out.println("Valor Pagto: " + valorPg);
                        //Total pago - Saidas
                        double saidas = caixa.totalizaSaida(lblOperador.getText());
                        double saldoInicial = caixa.retornaSaldoInicial(txtIdFuncionario.getText());
                        double saldoEspecie = (totalEspecie+saldoInicial) - saidas;

                        /*Visualiza cálculo no terminal
                        System.out.println("Total Especie: "+totalEspecie);
                        System.out.println("Total Saidas: "+saidas);
                        System.out.println("Saldo Especie Saidas: "+saldoEspecie);
                         */
                        // Não permite pagamento com valor zero
                        if (valorPg == 0) {
                            JOptionPane.showMessageDialog(this, "O valor informado não é válido!", "Atenção", JOptionPane.ERROR_MESSAGE);
                        } else {

                            // Verifica se existe saldo em espécie suficiente para o pagamento da conta.
                            
                            if (saldoEspecie < valorPg) {
                                JOptionPane.showMessageDialog(this, "Saldo do Caixa em espécie insuficiente!", "Atenção!", JOptionPane.ERROR_MESSAGE);
                            } else {

                                if (cc.baixarConta(c)) {

                                    JOptionPane.showMessageDialog(null, "Pagamento realizado com sucesso!");
                                    comboFiltro.setSelectedItem("Pagas");
                                    btnBaixar.setEnabled(false);
                                    lblExcluir.setEnabled(false);
                                    l.setFuncionalidade("Contas");
                                    l.setDescricao("Pagou a conta-> " + txtDescricao.getText() + " Valor R$ " + txtValorPago.getText());
                                    l.gravaLog(l);
                                    limpaForm();
                                    // Atualiza o cálculo da movimentação
                                    try {
                                        tc.atualizaCaixa();

                                    } catch (NullPointerException ex) {
                                        //System.out.println("Erro ao atualizar o caixa -> "+ex);
                                    }
                                }
                            }
                        }

                    }
                }
            }

        }

    }//GEN-LAST:event_btnBaixarMouseClicked

    private void btnBaixarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBaixarMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_btnBaixarMouseEntered

    private void btnGraficoDeDespesasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnGraficoDeDespesasMouseClicked
        // Gera gráfico de pizza das Despesas 
        DefaultPieDataset pieDataset = new DefaultPieDataset();
        ResultSet rs = cc.listaContasPorCategoria();

        //Captura dados da consulta
        try {
            while (rs.next()) {
                pieDataset.setValue(rs.getString("grupo"), rs.getDouble("valor"));

            }
        } catch (SQLException e) {
            System.out.println("Erro ao preencher pierDataSet" + e);
        }
        // Cria Gráfico de Pizza

        JFreeChart graficoPizza = ChartFactory.createPieChart3D("Demonstrativo de Despesas", pieDataset, true, true, true);
        // Plotagem

        PiePlot piePlot = (PiePlot) graficoPizza.getPlot();

        // Janela do Grafico
        ChartFrame frame = new ChartFrame("Gráfico - Demonstrativo de Despesas", graficoPizza);
        frame.setSize(947, 524);
        frame.setVisible(true);

    }//GEN-LAST:event_btnGraficoDeDespesasMouseClicked

    private void jCheckMultiploMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckMultiploMouseClicked
        // Exibe caixa quantidade
        if (jCheckMultiplo.isEnabled()) {

            if (jCheckMultiplo.isSelected()) {
                jSpinQtd.setVisible(true);
                lblDataDePAgamento.setVisible(true);
                lblDataDePAgamento.setText("Parcelas");

            } else {
                jSpinQtd.setVisible(false);
                lblDataDePAgamento.setVisible(false);
                lblDataDePAgamento.setText("Data de Pagamento");
            }
        }
    }//GEN-LAST:event_jCheckMultiploMouseClicked

    private void lblsalvarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblsalvarMouseClicked
        //Cadastra Conta
        if (lblsalvar.isEnabled()) {

            Contas c = new Contas();

            c.setDescricao(txtDescricao.getText());
            c.setDataVencto(cc.myData(jdateChooserVencimento));
            c.setValor(txtValor.getText().replace(".", ""));
            c.setValor(c.getValor().replace(",", "."));

            c.setGrupoId(txtIdGrupo.getText());
            c.setFuncionarioId(txtIdFuncionario.getText());

            if ("".equals(c.getDescricao()) || "".equals(c.getValor())) {
                JOptionPane.showMessageDialog(this, "Preencha todos os campos para continuar!");
            } else {
                if ("Selecione...".equals(comboGrupoDespesas.getSelectedItem().toString())) {
                    JOptionPane.showMessageDialog(this, "Selecione um grupo para continuar!");
                } else {
                    if (jCheckMultiplo.isSelected()) {
                        if ("0.00".equals(c.getValor())) {
                            JOptionPane.showMessageDialog(this, "Valor Inválido!", "Atenção", JOptionPane.ERROR_MESSAGE);
                        } else {

                            if (cc.lancamentoMultiplo(Integer.parseInt(jSpinQtd.getValue().toString()), jdateChooserVencimento, c)) {
                                JOptionPane.showMessageDialog(this, "Lançamento múltiplo realiado com sucesso!");
                                tblContas.setModel(DbUtils.resultSetToTableModel(cc.listaContasApagar("Aberto")));
                                modelcontas.redimensionaColunas(tblContas);
                                limpaForm();
                            }
                        }
                    } else {
                        // Caso o checkList não esteja selecionado executa a parcela de forma padrão
                        if ("0.00".equals(c.getValor())) {
                            JOptionPane.showMessageDialog(this, "Valor Inválido!", "Atenção", JOptionPane.ERROR_MESSAGE);
                        } else {
                            if (cc.adicionaConta(c)) {
                                //Registra operação no log
                                l.setFuncionalidade("Salvar");
                                l.setDescricao("Salvou uma nova conta -> " + txtDescricao.getText() + " Valor R$ " + txtValor.getText());
                                l.gravaLog(l);
                                // fim do registro de log
                                limpaForm();
                                lblLimpar.setEnabled(true);
                                desaBilitaBotoes();
                                comboFiltro.setSelectedItem("Abertas");
                                tblContas.setModel(DbUtils.resultSetToTableModel(cc.listaContasApagar("Abertas")));
                                modelcontas.redimensionaColunas(tblContas);
                            }

                        }

                    }
                }
            }
        }

    }//GEN-LAST:event_lblsalvarMouseClicked


    private void lblLimparMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblLimparMouseClicked
        // Desabilita o botão limpar.
        if (lblLimpar.isEnabled()) {

            limpaForm();
            estadoInicial();
            habilitaCampos();
            comboFiltro.setSelectedItem("Selecione...");
            jdateChooserVencimento.setDate(Calendar.getInstance().getTime());
            jCheckMultiplo.setSelected(false);
        }
    }//GEN-LAST:event_lblLimparMouseClicked

    private void lblExcluirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblExcluirMouseClicked
        if (lblExcluir.isEnabled()) {

            //Exclui conta
            int linha = tblContas.getSelectedRow();

            Contas c = new Contas();
            c.setId(txtIdConta.getText());
            try {
                // Se data de pagamento estiver vazia setará Null no objeto conta
                c.setDataPagto(tblContas.getModel().getValueAt(linha, 4).toString());
                System.out.println("data de pagamento:" + c.getDataPagto());
            } catch (Exception e) {
                c.setDataPagto(null);
            }
            c.setDescricao(tblContas.getValueAt(linha, 1).toString());
            c.setDataVencto(tblContas.getValueAt(linha, 3).toString());
            c.setValor(tblContas.getValueAt(linha, 2).toString());
            if (c.getDataPagto() == null) {

                if (!txtIdConta.getText().isEmpty()) {
                    // Registra operação no log
                    l.setFuncionalidade("Excluir");
                    l.setDescricao("Excluiu a conta -> " + txtDescricao.getText() + " Vencimento: " + c.getDataVencto() + " Valor R$ " + c.getValor());
                    l.gravaLog(l);
                    // Fim registro de log
                    if (c.getDescricao() == null || "".equals(c.getDescricao())) {

                    } else {

                        cc.excluiConta(c);
                        //Desabilita TextFild 'Valor Pago' e o Botão de Pagamento 
                        //após exclusão ou cancelamento da confirmação de exclusão
                        txtValorPago.setEnabled(false);
                        btnBaixar.setEnabled(false);
                    }
                    tblContas.setModel(DbUtils.resultSetToTableModel(cc.listaContasApagar("Aberto")));  // Filtro Aberto | Tudo
                    modelcontas.redimensionaColunas(tblContas);
                    telaPrincipal.atualizaInformativo();
                    limpaForm();
                    desaBilitaBotoes();
                } else {
                    JOptionPane.showMessageDialog(null, "Selecione uma conta para continuar!");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Contas pagas não podem ser excluídas!");
                limpaForm();

            }
        }


    }//GEN-LAST:event_lblExcluirMouseClicked

    private void comboFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboFiltroActionPerformed
        // Carrega tabela conforme opção escolhida no ComboBox
        String op = comboFiltro.getSelectedItem().toString();

        switch (op) {

            case "Abertas":
                ResultSet rs = cc.listaContasApagar(op);
                 {
                    try {
                        if (rs.next()) {

                            btnBaixar.setEnabled(true);
                            desabilitaCampos();
                            lblsalvar.setEnabled(false);
                            lblLimpar.setEnabled(false);
                        } else {
                            btnBaixar.setEnabled(false);
                        }
                    } catch (SQLException ex) {
                        System.out.println("br.com.bar.view.TelaContasApagar.comboFiltroActionPerformed()");
                    }
                }
                tblContas.setModel(DbUtils.resultSetToTableModel(cc.listaContasApagar(op)));
                btnBaixar.setEnabled(false);
                panelFiltro.setVisible(false);
                break;
            case "Pagas":
                String inicio = u.formataDataBanco(new Date());
                String fim = u.formataDataBanco(new Date());
                tblContas.setModel(DbUtils.resultSetToTableModel(cc.listaContasApagar(inicio, fim)));
                btnBaixar.setEnabled(false);
                jdateChooserVencimento.setEnabled(false);
                desabilitaCampos();
                panelFiltro.setVisible(true);
                break;

            case "Selecione...":
                //DefaultTableModel tbm = new DefaultTableModel();
                TableModelContasApagar tbm = new TableModelContasApagar();
                tblContas.setModel(tbm);
                desaBilitaBotoes();
                lblLimpar.setEnabled(true);
                lblsalvar.setEnabled(true);
                limpaForm();
                btnBaixar.setEnabled(false);
                txtValorPago.setVisible(false);
                lblValorPago.setVisible(false);
                jdateChooserPagamento.setVisible(false);
                lblDataDePAgamento.setVisible(false);
                panelFiltro.setVisible(false);

                break;

        }

        try {
            modelcontas.redimensionaColunas(tblContas);
        } catch (ArrayIndexOutOfBoundsException e) {
            System.out.println("br.com.bar.view.TelaContasApagar.comboFiltroActionPerformed()");
        }

    }//GEN-LAST:event_comboFiltroActionPerformed

    private void jCheckMultiploActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckMultiploActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckMultiploActionPerformed

    private void txtDescricaoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDescricaoFocusGained
        // Desabilita TextFild Valor
        txtValor.setEditable(true);
    }//GEN-LAST:event_txtDescricaoFocusGained

    private void txtIdContaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIdContaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIdContaActionPerformed

    private void txtValorPagoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtValorPagoFocusLost
        FormataValor fv = new FormataValor();
        //txtValorPago.setText(fv.Formata(txtValorPago.getText()));
    }//GEN-LAST:event_txtValorPagoFocusLost

    private void txtValorFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtValorFocusLost
        FormataValor fv = new FormataValor();
        //txtValor.setText(fv.Formata(txtValor.getText()));
    }//GEN-LAST:event_txtValorFocusLost

    private void lblLimparKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lblLimparKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_lblLimparKeyReleased

    private void txtValorPagoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtValorPagoKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

            FormataValor fv = new FormataValor();
            txtValorPago.setText(fv.Formata(txtValorPago.getText()));
        }
    }//GEN-LAST:event_txtValorPagoKeyPressed

    private void txtValorKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtValorKeyPressed

        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            FormataValor fv = new FormataValor();
            txtValor.setText(fv.Formata(txtValor.getText()));

        }
    }//GEN-LAST:event_txtValorKeyPressed

    private void lblPesquisarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblPesquisarMouseClicked
        String inicio = u.formataDataBanco(jDateInicio.getDate());
        String fim = u.formataDataBanco(jDateFim.getDate());
        tblContas.setModel(DbUtils.resultSetToTableModel(cc.listaContasApagar(inicio, fim)));
        modelcontas.redimensionaColunas(tblContas);

    }//GEN-LAST:event_lblPesquisarMouseClicked

    private void jDateInicioPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jDateInicioPropertyChange

        //jDateInicio.setMaxSelectableDate(new Date());
        Calendar dataAtual = Calendar.getInstance();
        dataAtual.setTime(new Date());
        //jDateInicio.setMaxSelectableDate(new Date());
        if (jDateInicio.getDate() != null) {

            Calendar c = Calendar.getInstance();
            c.setTime(jDateInicio.getDate());
            c.add(Calendar.DAY_OF_MONTH, +30);

            if (c.getTime().after(dataAtual.getTime())) {
                jDateFim.setDate(dataAtual.getTime());

            } else {
                jDateFim.setDate(c.getTime());

            }
        }


    }//GEN-LAST:event_jDateInicioPropertyChange

    private void jDateFimPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jDateFimPropertyChange

        Calendar c = Calendar.getInstance();
        Calendar cAtual = Calendar.getInstance();
        cAtual.setTime(new Date());

        if (jDateFim.getDate() != null) {
            try {
                if (Calendar.MONTH == cAtual.MONTH) {
//                    String dtInicio = u.formataDataBanco(jDateInicio.getDate());
//                    String dtFim = u.formataDataBanco(jDateFim.getDate());
//                    int dias = (int) u.retornaTotalDeDias(dtInicio, dtFim);
//                    System.out.println("Dias entre as Datas: " + dias);
//                    c.setTime(jDateFim.getDate());
//                    c.add(Calendar.DAY_OF_MONTH, -dias);
//                    jDateInicio.setDate(c.getTime());

                } else {

                    if (jDateFim.getDate().getTime() < jDateInicio.getDate().getTime()) {

                        c.setTime(jDateFim.getDate());
                        c.add(Calendar.DAY_OF_MONTH, -30);
                        jDateInicio.setDate(c.getTime());

                    } else {

                    }
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Selecione a data inicial.");
                //jDateInicio.setDate(new Date());
            }

        } else {

            try {
//                   
                if (jDateFim.getDate().before(jDateInicio.getDate())) {

                    c.setTime(jDateFim.getDate());
                    c.add(Calendar.DAY_OF_MONTH, -30);
                    jDateInicio.setDate(c.getTime());

                }

            } catch (Exception e) {

            }
        }
        jDateFim.setMaxSelectableDate(new Date());


    }//GEN-LAST:event_jDateFimPropertyChange

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaContasApagar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaContasApagar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaContasApagar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaContasApagar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaContasApagar().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Bordas;
    private javax.swing.JLabel btnBaixar;
    private javax.swing.JLabel btnGraficoDeDespesas;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> comboFiltro;
    private javax.swing.JComboBox<String> comboGrupoDespesas;
    private javax.swing.JCheckBox jCheckMultiplo;
    private com.toedter.calendar.JDateChooser jDateFim;
    private com.toedter.calendar.JDateChooser jDateInicio;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinQtd;
    private com.toedter.calendar.JDateChooser jdateChooserPagamento;
    private com.toedter.calendar.JDateChooser jdateChooserVencimento;
    private javax.swing.JLabel lblCargo;
    private javax.swing.JLabel lblDataDePAgamento;
    private javax.swing.JLabel lblExcluir;
    private javax.swing.JLabel lblLimpar;
    private javax.swing.JLabel lblOperador;
    private javax.swing.JLabel lblPesquisar;
    private javax.swing.JLabel lblValorPago;
    private javax.swing.JLabel lblsalvar;
    private javax.swing.JPanel painelDireito;
    private javax.swing.JPanel painelEsquerdo;
    private javax.swing.JPanel panelFiltro;
    private javax.swing.JTable tblContas;
    private javax.swing.JLabel tbnFechar;
    private javax.swing.JTextField txtDescricao;
    private javax.swing.JTextField txtIdConta;
    private javax.swing.JTextField txtIdFuncionario;
    private javax.swing.JTextField txtIdGrupo;
    private javax.swing.JTextField txtValor;
    private javax.swing.JFormattedTextField txtValorPago;
    // End of variables declaration//GEN-END:variables

    private void limpaForm() {
        txtDescricao.setText(null);
        txtValor.setText(null);
        txtValorPago.setText(null);
        jdateChooserPagamento.setDate(null);
        jdateChooserVencimento.setDate(null);
        comboGrupoDespesas.setSelectedItem("Selecione...");

    }

    private void habilitaBotoes() {
        lblLimpar.setEnabled(true);
        lblsalvar.setEnabled(true);
        lblExcluir.setEnabled(true);
        jCheckMultiplo.setEnabled(true);
    }

    private void desaBilitaBotoes() {

        lblExcluir.setEnabled(false);
        panelFiltro.setVisible(false);
    }

    // Desabilita os campos necessários para o cadastro de contas
    private void desabilitaCampos() {
        txtDescricao.setEnabled(false);
        jdateChooserVencimento.setEnabled(false);
        comboGrupoDespesas.setEnabled(false);
        txtValor.setEnabled(false);
        jCheckMultiplo.setEnabled(false);
        jCheckMultiplo.setSelected(false);
        jdateChooserPagamento.setEnabled(false);
        txtValor.setEnabled(false);
        txtValorPago.setEnabled(false);

    }

    // Habilita os campos necessários para o cadastro de contas
    private void habilitaCampos() {
        txtDescricao.setEnabled(true);
        jdateChooserVencimento.setEnabled(true);
        comboGrupoDespesas.setEnabled(true);
        txtValor.setEnabled(true);
        jCheckMultiplo.setEnabled(true);
    }

    private void estadoInicial() {
        jSpinQtd.setVisible(false);
        lblDataDePAgamento.setVisible(false);
        jdateChooserPagamento.setVisible(false);
        jdateChooserVencimento.setDate(new Date());
        lblValorPago.setVisible(false);
        txtValorPago.setVisible(false);
        btnBaixar.setEnabled(false);
        cc.listaGrupos(comboGrupoDespesas);
        txtIdGrupo.setText(grupo.localizaIdGrupo(comboGrupoDespesas));
        modelcontas.redimensionaColunas(tblContas);
    }
}
